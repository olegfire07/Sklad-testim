# main.py

import streamlit as st
import numpy as np
import pandas as pd
import os
import joblib

from data_model import WarehouseParams, validate_inputs
from calculations import (
    calculate_areas,
    calculate_items,
    calculate_financials,
    calculate_additional_metrics,
    calculate_roi,
    calculate_irr,  # –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    monte_carlo_simulation,
    calculate_total_bep,
    min_loan_amount_for_bep
)
from utils import normalize_shares
from ui import (
    display_tab1,
    display_tab2,
    display_tab3,
    display_tab4
)
from ml_models import train_ml_model, predict_with_model

st.set_page_config(page_title="–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å —Å–∫–ª–∞–¥–∞ üì¶", layout="wide")

st.markdown("# –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å —Å–∫–ª–∞–¥–∞ üì¶")
st.markdown("–í—Å–µ —Ä–∞—Å—á—ë—Ç—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏. –ü—Ä–æ—Å—Ç–æ –º–µ–Ω—è–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤—è—Ç—Å—è.")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–≤–æ–¥–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –¥–æ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def input_storage_share(share_key, current_share):
    """
    –í–≤–æ–¥ –¥–æ–ª–∏ –ø–ª–æ—â–∞–¥–∏ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è.
    
    :param share_key: –ö–ª—é—á –¥–æ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'storage_share')
    :param current_share: –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∏ (–æ—Ç 0 –¥–æ 1)
    :return: –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∏
    """
    share_labels = {
        "storage_share": "–ü—Ä–æ—Å—Ç–æ–µ",
        "loan_share": "–ó–∞–π–º—ã",
        "vip_share": "VIP",
        "short_term_share": "–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ"
    }
    new_share = st.slider(
        f"{share_labels.get(share_key, share_key).upper()} (%)",
        0.0, 
        100.0, 
        current_share * 100, 
        step=1.0, 
        help="–î–æ–ª—è –ø–ª–æ—â–∞–¥–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è."
    ) / 100.0
    normalize_shares(share_key, new_share)
    return st.session_state.shares[share_key]

if 'shares' not in st.session_state:
    st.session_state.shares = {
        'storage_share': 0.25,
        'loan_share': 0.25,
        'vip_share': 0.25,
        'short_term_share': 0.25
    }

with st.sidebar:
    st.markdown("## –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    
    with st.sidebar.expander("### –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∫–ª–∞–¥–∞"):
        total_area = st.number_input(
            "üìè –û–±—â–∞—è –ø–ª–æ—â–∞–¥—å (–º¬≤)", 
            value=250, 
            step=10, 
            min_value=1, 
            help="–û–±—â–∞—è –∞—Ä–µ–Ω–¥—É–µ–º–∞—è –ø–ª–æ—â–∞–¥—å —Å–∫–ª–∞–¥–∞."
        )
        rental_cost_per_m2 = st.number_input(
            "üí∞ –ê—Ä–µ–Ω–¥–∞ (—Ä—É–±./–º¬≤/–º–µ—Å.)", 
            value=1000, 
            step=50, 
            min_value=1, 
            help="–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –∞—Ä–µ–Ω–¥–∞ –∑–∞ 1 –º¬≤."
        )
        useful_area_ratio = st.slider(
            "üìê –î–æ–ª—è –ø–æ–ª–µ–∑–Ω–æ–π –ø–ª–æ—â–∞–¥–∏ (%)", 
            40, 
            80, 
            50, 
            5, 
            help="–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ª–µ–∑–Ω–æ–π –ø–ª–æ—â–∞–¥–∏ –æ—Ç –æ–±—â–µ–π."
        ) / 100.0

    with st.sidebar.expander("### –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø–ª–æ—â–∞–¥–∏"):
        mode = st.radio(
            "–†–µ–∂–∏–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–ª–æ—â–∞–¥–∏", 
            ["–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π", "–†—É—á–Ω–æ–π"], 
            index=0, 
            help="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π: –¥–æ–ª–∏ —Å—É–º–º–∏—Ä—É—é—Ç—Å—è –¥–æ 100%. –†—É—á–Ω–æ–π: –≤–≤–æ–¥ –ø–ª–æ—â–∞–¥–µ–π –≤—Ä—É—á–Ω—É—é."
        )

        if mode == "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π":
            st.markdown("#### –î–æ–ª–∏ –≤–∏–¥–æ–≤ —Ö—Ä–∞–Ω–µ–Ω–∏—è (%)")
            no_storage_for_storage = st.checkbox(
                "üö´ –û—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ", 
                value=False, 
                help="–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, –ø—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ = 0%."
            )
            no_storage_for_loan = st.checkbox(
                "üö´ –û—Ç–∫–ª—é—á–∏—Ç—å –∑–∞–π–º—ã", 
                value=False, 
                help="–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, –∑–∞–π–º—ã = 0%."
            )
            no_storage_for_vip = st.checkbox(
                "üö´ –û—Ç–∫–ª—é—á–∏—Ç—å VIP", 
                value=False, 
                help="–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, VIP = 0%."
            )
            no_storage_for_short_term = st.checkbox(
                "üö´ –û—Ç–∫–ª—é—á–∏—Ç—å –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ", 
                value=False, 
                help="–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ = 0%."
            )

            if no_storage_for_storage:
                st.session_state.shares['storage_share'] = 0.0
            if no_storage_for_loan:
                st.session_state.shares['loan_share'] = 0.0
            if no_storage_for_vip:
                st.session_state.shares['vip_share'] = 0.0
            if no_storage_for_short_term:
                st.session_state.shares['short_term_share'] = 0.0

            storage_options = []
            if not no_storage_for_storage: storage_options.append("storage_share")
            if not no_storage_for_loan: storage_options.append("loan_share")
            if not no_storage_for_vip: storage_options.append("vip_share")
            if not no_storage_for_short_term: storage_options.append("short_term_share")

            for share_key in storage_options:
                current_share = st.session_state.shares[share_key]
                st.session_state.shares[share_key] = input_storage_share(share_key, current_share)

            storage_share = st.session_state.shares['storage_share']
            loan_share = st.session_state.shares['loan_share']
            vip_share = st.session_state.shares['vip_share']
            short_term_share = st.session_state.shares['short_term_share']

            storage_area_manual = 0.0
            loan_area_manual = 0.0
            vip_area_manual = 0.0
            short_term_area_manual = 0.0
        else:
            st.markdown("#### –†—É—á–Ω–æ–π –≤–≤–æ–¥ –ø–ª–æ—â–∞–¥–µ–π (–º¬≤)")
            temp_usable = total_area * useful_area_ratio
            storage_area_manual = st.number_input(
                "–ü—Ä–æ—Å—Ç–æ–µ (–º¬≤)", 
                value=50.0, 
                step=10.0, 
                min_value=0.0, 
                help="–ü–ª–æ—â–∞–¥—å –ø–æ–¥ –ø—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ."
            )
            loan_area_manual = st.number_input(
                "–ó–∞–π–º—ã (–º¬≤)", 
                value=50.0, 
                step=10.0, 
                min_value=0.0, 
                help="–ü–ª–æ—â–∞–¥—å –ø–æ–¥ –∑–∞–π–º—ã."
            )
            vip_area_manual = st.number_input(
                "VIP (–º¬≤)", 
                value=50.0, 
                step=10.0, 
                min_value=0.0, 
                help="–ü–ª–æ—â–∞–¥—å –ø–æ–¥ VIP —Ö—Ä–∞–Ω–µ–Ω–∏–µ."
            )
            short_term_area_manual = st.number_input(
                "–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ (–º¬≤)", 
                value=50.0, 
                step=10.0, 
                min_value=0.0, 
                help="–ü–ª–æ—â–∞–¥—å –ø–æ–¥ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ."
            )

            total_manual_set = storage_area_manual + loan_area_manual + vip_area_manual + short_term_area_manual
            leftover = temp_usable - total_manual_set
            st.write(f"–ù–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: {leftover:.2f} –º¬≤ –∏–∑ {temp_usable:.2f} –º¬≤ –ø–æ–ª–µ–∑–Ω–æ–π –ø–ª–æ—â–∞–¥–∏.")

            storage_share = st.session_state.shares['storage_share']
            loan_share = st.session_state.shares['loan_share']
            vip_share = st.session_state.shares['vip_share']
            short_term_share = st.session_state.shares['short_term_share']

    with st.sidebar.expander("### –¢–∞—Ä–∏—Ñ—ã –∏ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏"):
        storage_fee = st.number_input(
            "üí≥ –¢–∞—Ä–∏—Ñ –ø—Ä–æ—Å—Ç–æ–≥–æ (—Ä—É–±./–º¬≤/–º–µ—Å.)", 
            value=1500, 
            step=100, 
            min_value=0,
            help="–¢–∞—Ä–∏—Ñ –∑–∞ –ø—Ä–æ—Å—Ç–æ–π —Å–∫–ª–∞–¥ (—Ä—É–±/–º¬≤/–º–µ—Å)."
        )
        shelves_per_m2 = st.number_input(  # –ò–∑–º–µ–Ω–µ–Ω–æ
            "üìö –ü–æ–ª–æ–∫ –Ω–∞ 1 –º¬≤", 
            value=3, 
            step=1, 
            min_value=1, 
            max_value=100,
            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–æ–∫ –Ω–∞ 1 –º¬≤. –í–ª–∏—è–µ—Ç –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—â–µ–π –∏ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø–ª–æ—â–∞–¥–∏."
        )
        short_term_daily_rate = st.number_input(
            "üïí –¢–∞—Ä–∏—Ñ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–≥–æ (—Ä—É–±./–¥–µ–Ω—å/–º¬≤)", 
            value=60.0, 
            step=10.0, 
            min_value=0.0,
            help="–¢–∞—Ä–∏—Ñ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è (—Ä—É–±/–¥–µ–Ω—å/–º¬≤)."
        )
        vip_extra_fee = st.number_input(
            "üëë –ù–∞—Ü–µ–Ω–∫–∞ VIP (—Ä—É–±./–º¬≤/–º–µ—Å.)", 
            value=100.0, 
            step=50.0, 
            min_value=0.0,
            help="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Ü–µ–Ω–∫–∞ –∑–∞ VIP —Ö—Ä–∞–Ω–µ–Ω–∏–µ."
        )

    with st.sidebar.expander("### –û—Ü–µ–Ω–∫–∞ –∏ –∑–∞–π–º—ã"):
        item_evaluation = st.slider(
            "üîç –û—Ü–µ–Ω–∫–∞ –≤–µ—â–∏ (%)", 
            0, 
            100, 
            80, 
            5, 
            help="–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ü–µ–Ω–∫–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤–µ—â–∏ –ø—Ä–∏ –∑–∞–π–º–µ."
        ) / 100.0
        item_realization_markup = st.number_input(
            "üìà –ù–∞—Ü–µ–Ω–∫–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ (%)", 
            value=20.0, 
            step=5.0, 
            min_value=0.0, 
            max_value=100.0,
            help="–ù–∞—Ü–µ–Ω–∫–∞ –ø—Ä–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–µ—â–µ–π."
        )
        average_item_value = st.number_input(
            "üí≤ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –æ–¥–Ω–æ–π –≤–µ—â–∏ (—Ä—É–±.)", 
            value=15000, 
            step=500, 
            min_value=0,
            help="–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π –≤–µ—â–∏."
        )
        loan_interest_rate = st.number_input(
            "üí≥ –°—Ç–∞–≤–∫–∞ –∑–∞–π–º–æ–≤ (%/–¥–µ–Ω—å)", 
            value=0.317, 
            step=0.01, 
            min_value=0.0,
            help="–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –ø–æ –∑–∞–π–º–∞–º –≤ –¥–µ–Ω—å."
        )

    with st.sidebar.expander("### –†–µ–∞–ª–∏–∑–∞—Ü–∏—è (%)"):
        realization_share_storage = st.slider(
            "–ü—Ä–æ—Å—Ç–æ–µ", 
            0, 
            100, 
            50, 
            5, 
            help="–ü—Ä–æ—Ü–µ–Ω—Ç —Ä–µ–∞–ª–∏–∑—É–µ–º—ã—Ö –≤–µ—â–µ–π –∏–∑ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è."
        ) / 100.0
        realization_share_loan = st.slider(
            "–ó–∞–π–º—ã", 
            0, 
            100, 
            50, 
            5, 
            help="–ü—Ä–æ—Ü–µ–Ω—Ç —Ä–µ–∞–ª–∏–∑—É–µ–º—ã—Ö –≤–µ—â–µ–π –∏–∑ –∑–∞–ª–æ–≥–æ–≤—ã—Ö."
        ) / 100.0
        realization_share_vip = st.slider(
            "VIP", 
            0, 
            100, 
            50, 
            5, 
            help="–ü—Ä–æ—Ü–µ–Ω—Ç —Ä–µ–∞–ª–∏–∑—É–µ–º—ã—Ö –≤–µ—â–µ–π –∏–∑ VIP."
        ) / 100.0
        realization_share_short_term = st.slider(
            "–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ", 
            0, 
            100, 
            50, 
            5, 
            help="–ü—Ä–æ—Ü–µ–Ω—Ç —Ä–µ–∞–ª–∏–∑—É–µ–º—ã—Ö –≤–µ—â–µ–π –∏–∑ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–≥–æ."
        ) / 100.0

    with st.sidebar.expander("### –ü–ª–æ—Ç–Ω–æ—Å—Ç—å (–≤–µ—â–µ–π/–º¬≤)"):
        storage_items_density = st.number_input(
            "–ü—Ä–æ—Å—Ç–æ–µ", 
            value=5, 
            step=1, 
            min_value=1,
            help="–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–µ—â–µ–π –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è (–≤–µ—â–µ–π/–º¬≤)."
        )
        loan_items_density = st.number_input(
            "–ó–∞–π–º—ã", 
            value=1, 
            step=1, 
            min_value=1,
            help="–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–µ—â–µ–π –¥–ª—è –∑–∞–π–º–æ–≤ (–≤–µ—â–µ–π/–º¬≤)."
        )
        vip_items_density = st.number_input(
            "VIP", 
            value=2, 
            step=1, 
            min_value=1,
            help="–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–µ—â–µ–π –¥–ª—è VIP (–≤–µ—â–µ–π/–º¬≤)."
        )
        short_term_items_density = st.number_input(
            "–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ", 
            value=4, 
            step=1, 
            min_value=1,
            help="–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–µ—â–µ–π –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è (–≤–µ—â–µ–π/–º¬≤)."
        )

    with st.sidebar.expander("### –§–∏–Ω–∞–Ω—Å—ã (–µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ)"):
        salary_expense = st.number_input(
            "–ó–∞—Ä–ø–ª–∞—Ç–∞ (—Ä—É–±./–º–µ—Å.)", 
            value=240000, 
            step=10000, 
            min_value=0,
            help="–û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª –≤ –º–µ—Å—è—Ü."
        )
        miscellaneous_expenses = st.number_input(
            "–ü—Ä–æ—á–∏–µ (—Ä—É–±./–º–µ—Å.)", 
            value=50000, 
            step=5000, 
            min_value=0,
            help="–ü—Ä–æ—á–∏–µ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã."
        )
        depreciation_expense = st.number_input(
            "–ê–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è (—Ä—É–±./–º–µ—Å.)", 
            value=20000, 
            step=5000, 
            min_value=0,
            help="–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è."
        )
        marketing_expenses = st.number_input(
            "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ (—Ä—É–±./–º–µ—Å.)", 
            value=30000, 
            step=5000, 
            min_value=0,
            help="–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ –≤ –º–µ—Å—è—Ü."
        )
        insurance_expenses = st.number_input(
            "–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ (—Ä—É–±./–º–µ—Å.)", 
            value=10000, 
            step=1000, 
            min_value=0,
            help="–°—Ç—Ä–∞—Ö–æ–≤—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –≤ –º–µ—Å—è—Ü."
        )
        taxes = st.number_input(
            "–ù–∞–ª–æ–≥–∏ (—Ä—É–±./–º–µ—Å.)", 
            value=50000, 
            step=5000, 
            min_value=0,
            help="–ù–∞–ª–æ–≥–æ–≤—ã–µ –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è –≤ –º–µ—Å—è—Ü."
        )
        utilities_expenses = st.number_input(
            "–ö–æ–º–º—É–Ω–∞–ª–∫–∞ (—Ä—É–±./–º–µ—Å.)", 
            value=20000, 
            step=5000, 
            min_value=0,
            help="–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ –≤ –º–µ—Å—è—Ü."
        )
        maintenance_expenses = st.number_input(
            "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ (—Ä—É–±./–º–µ—Å.)", 
            value=15000, 
            step=5000, 
            min_value=0,
            help="–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –≤ –º–µ—Å—è—Ü."
        )

    with st.sidebar.expander("### –§–∏–Ω–∞–Ω—Å—ã (–µ–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ)"):
        one_time_setup_cost = st.number_input(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ (—Ä—É–±.)", 
            value=100000, 
            step=5000, 
            min_value=0,
            help="–ï–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É."
        )
        one_time_equipment_cost = st.number_input(
            "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ (—Ä—É–±.)", 
            value=200000, 
            step=5000, 
            min_value=0,
            help="–ï–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ."
        )
        one_time_other_costs = st.number_input(
            "–î—Ä—É–≥–∏–µ (—Ä—É–±.)", 
            value=50000, 
            step=5000, 
            min_value=0,
            help="–î—Ä—É–≥–∏–µ –µ–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã."
        )
        one_time_legal_cost = st.number_input(
            "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ (—Ä—É–±.)", 
            value=20000, 
            step=5000, 
            min_value=0,
            help="–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –µ–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã."
        )
        one_time_logistics_cost = st.number_input(
            "–õ–æ–≥–∏—Å—Ç–∏–∫–∞ (—Ä—É–±.)", 
            value=30000, 
            step=5000, 
            min_value=0,
            help="–ï–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã."
        )

    with st.sidebar.expander("### –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ"):
        disable_extended = st.checkbox(
            "üö´ –û—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", 
            value=False,
            help="–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±—É–¥—É—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã."
        )
        if not disable_extended:
            time_horizon = st.slider(
                "üïí –ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ (–º–µ—Å.)", 
                1, 
                24, 
                6,
                help="–ü–µ—Ä–∏–æ–¥ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –º–µ—Å—è—Ü–∞—Ö."
            )
            monthly_rent_growth = st.number_input(
                "üìà –†–æ—Å—Ç –∞—Ä–µ–Ω–¥—ã (%/–º–µ—Å.)", 
                value=1.0, 
                step=0.5, 
                min_value=0.0,
                help="–ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π —Ä–æ—Å—Ç –∞—Ä–µ–Ω–¥—ã –µ–∂–µ–º–µ—Å—è—á–Ω–æ."
            ) / 100.0
            default_probability = st.number_input(
                "‚ö†Ô∏è –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–µ–≤–æ–∑–≤—Ä–∞—Ç–∞ (%)", 
                value=5.0, 
                step=1.0, 
                min_value=0.0, 
                max_value=100.0,
                help="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–µ–≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ –∑–∞–π–º–∞–º."
            ) / 100.0
            liquidity_factor = st.number_input(
                "üíß –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å", 
                value=1.0, 
                step=0.1, 
                min_value=0.1,
                help="–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
            )
            safety_factor = st.number_input(
                "üõ° –ó–∞–ø–∞—Å", 
                value=1.2, 
                step=0.1, 
                min_value=0.1,
                help="–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–ø–∞—Å–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
            )
            loan_grace_period = st.number_input(
                "‚è≥ –õ—å–≥–æ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (–º–µ—Å.)", 
                value=0, 
                step=1, 
                min_value=0,
                help="–õ—å–≥–æ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ –∑–∞–π–º–∞–º."
            )
            monthly_income_growth = st.number_input(
                "üìà –†–æ—Å—Ç –¥–æ—Ö–æ–¥–æ–≤ (%/–º–µ—Å.)", 
                value=0.0, 
                step=0.5,
                help="–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π —Ä–æ—Å—Ç –¥–æ—Ö–æ–¥–æ–≤ –≤ %/–º–µ—Å."
            ) / 100.0
            monthly_expenses_growth = st.number_input(
                "üìâ –†–æ—Å—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ (%/–º–µ—Å.)", 
                value=0.0, 
                step=0.5,
                help="–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π —Ä–æ—Å—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ %/–º–µ—Å."
            ) / 100.0
        else:
            time_horizon = 1
            monthly_rent_growth = 0.0
            default_probability = 0.0
            liquidity_factor = 1.0
            safety_factor = 1.2
            loan_grace_period = 0
            monthly_income_growth = 0.0
            monthly_expenses_growth = 0.0

        forecast_method = st.selectbox(
            "üìä –ú–µ—Ç–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è", 
            ["–ë–∞–∑–æ–≤—ã–π", "ML (–ª–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è)", "–°–∏–º—É–ª—è—Ü–∏—è –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ"],
            help="–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞."
        )
        if forecast_method == "–°–∏–º—É–ª—è—Ü–∏—è –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ":
            monte_carlo_simulations = st.number_input(
                "üé≤ –°–∏–º—É–ª—è—Ü–∏–π –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ", 
                value=100, 
                step=10, 
                min_value=10,
                help="–ß–∏—Å–ª–æ —Å–∏–º—É–ª—è—Ü–∏–π –¥–ª—è –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ."
            )
            monte_carlo_deviation = st.number_input(
                "üîÄ –û—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (0.1 = ¬±10%)", 
                value=0.1, 
                step=0.01, 
                min_value=0.01,
                help="–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–ª—è –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ —Å–∏–º—É–ª—è—Ü–∏–π."
            )
            monte_carlo_seed = st.number_input(
                "üîë Seed", 
                value=42, 
                step=1,
                help="–ó–µ—Ä–Ω–æ –¥–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª (–ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ)."
            )
        else:
            monte_carlo_simulations = 100
            monte_carlo_deviation = 0.1
            monte_carlo_seed = 42

        enable_ml_settings = False
        if forecast_method == "ML (–ª–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è)":
            enable_ml_settings = st.checkbox(
                "ü§ñ –í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π ML-–ø—Ä–æ–≥–Ω–æ–∑", 
                value=False,
                help="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è ML-–ø—Ä–æ–≥–Ω–æ–∑–∞."
            )

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
params = WarehouseParams(
    total_area=total_area,
    rental_cost_per_m2=rental_cost_per_m2,
    useful_area_ratio=useful_area_ratio,
    mode=mode,
    storage_share=storage_share,
    loan_share=loan_share,
    vip_share=vip_share,
    short_term_share=short_term_share,
    storage_area_manual=storage_area_manual,
    loan_area_manual=loan_area_manual,
    vip_area_manual=vip_area_manual,
    short_term_area_manual=short_term_area_manual,
    storage_fee=storage_fee,
    shelves_per_m2=shelves_per_m2,  # –ò–∑–º–µ–Ω–µ–Ω–æ
    short_term_daily_rate=short_term_daily_rate,
    vip_extra_fee=vip_extra_fee,
    item_evaluation=item_evaluation,
    item_realization_markup=item_realization_markup,
    average_item_value=average_item_value,
    loan_interest_rate=loan_interest_rate,
    realization_share_storage=realization_share_storage,
    realization_share_loan=realization_share_loan,
    realization_share_vip=realization_share_vip,
    realization_share_short_term=realization_share_short_term,
    storage_items_density=storage_items_density,
    loan_items_density=loan_items_density,
    vip_items_density=vip_items_density,
    short_term_items_density=short_term_items_density,
    salary_expense=salary_expense,
    miscellaneous_expenses=miscellaneous_expenses,
    depreciation_expense=depreciation_expense,
    marketing_expenses=marketing_expenses,
    insurance_expenses=insurance_expenses,
    taxes=taxes,
    utilities_expenses=utilities_expenses,
    maintenance_expenses=maintenance_expenses,
    one_time_setup_cost=one_time_setup_cost,
    one_time_equipment_cost=one_time_equipment_cost,
    one_time_other_costs=one_time_other_costs,
    one_time_legal_cost=one_time_legal_cost,
    one_time_logistics_cost=one_time_logistics_cost,
    time_horizon=time_horizon,
    monthly_rent_growth=monthly_rent_growth,
    default_probability=default_probability,
    liquidity_factor=liquidity_factor,
    safety_factor=safety_factor,
    loan_grace_period=loan_grace_period,
    monthly_income_growth=monthly_income_growth,
    monthly_expenses_growth=monthly_expenses_growth,
    forecast_method=forecast_method,
    monte_carlo_simulations=monte_carlo_simulations,
    monte_carlo_deviation=monte_carlo_deviation,
    monte_carlo_seed=monte_carlo_seed,
    enable_ml_settings=enable_ml_settings
)

is_valid, error_message = validate_inputs(params)
if is_valid:
    areas = calculate_areas(params)
    for k, v in areas.items():
        setattr(params, k, v)

    # –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –∑–¥–µ—Å—å
    # –í—ã—á–∏—Å–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–ª–æ—â–∞–¥—å, –∑–∞–Ω–∏–º–∞–µ–º—É—é –ø–æ–ª–∫–∞–º–∏
    SHELF_AREA_PER_SHELF = 0.1  # –º¬≤ –Ω–∞ –æ–¥–Ω—É –ø–æ–ª–∫—É, –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    number_of_shelves = params.shelves_per_m2 * params.storage_area  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–æ–∫
    shelves_area = number_of_shelves * SHELF_AREA_PER_SHELF
    params.storage_area += shelves_area  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–ª–æ—â–∞–¥—å –ø–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏–µ
    params.total_area += shelves_area  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±—â—É—é –ø–ª–æ—â–∞–¥—å —Å–∫–ª–∞–¥–∞
    # –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –∑–¥–µ—Å—å

    items_dict = {
        "stored_items": calculate_items(params.storage_area, params.shelves_per_m2, params.storage_items_density),
        "total_items_loan": calculate_items(params.loan_area, params.shelves_per_m2, params.loan_items_density),
        "vip_stored_items": calculate_items(params.vip_area, params.shelves_per_m2, params.vip_items_density),
        "short_term_stored_items": calculate_items(params.short_term_area, params.shelves_per_m2, params.short_term_items_density)
    }
    base_financials = calculate_financials(params, disable_extended=False)
    profit_margin, profitability = calculate_additional_metrics(
        base_financials["total_income"], base_financials["total_expenses"], base_financials["profit"]
    )
    roi_val = calculate_roi(base_financials["total_income"], base_financials["total_expenses"])

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–µ–Ω–µ–∂–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è IRR
    initial_investment = -(
        params.one_time_setup_cost +
        params.one_time_equipment_cost +
        params.one_time_other_costs
    )
    cash_flows = [initial_investment] + [base_financials["profit"]] * params.time_horizon
    irr_val = calculate_irr(cash_flows)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    print(f"–†–∞—Å—á–∏—Ç–∞–Ω–Ω—ã–π IRR: {irr_val}%")

    bep_val = calculate_total_bep(base_financials, params)

    # –ó–∞–≥—Ä—É–∑–∫–∞ ML-–º–æ–¥–µ–ª–∏, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ML
    ml_model = None
    if params.enable_ml_settings:
        model_path = "ml_model.pkl"
        if os.path.exists(model_path):
            try:
                ml_model = joblib.load(model_path)
                st.success("ML-–º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ML-–º–æ–¥–µ–ª–∏: {e}")
        else:
            st.warning("ML-–º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å.")

    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
    tab1, tab2_, tab3_, tab4_ = st.tabs(["üìä –û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", "üìà –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ", "üîç –¢–æ—á–∫–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏", "üìã –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è"])
    display_tab1(tab1, base_financials, profit_margin, profitability, roi_val, irr_val, params)
    display_tab2(tab2_, base_financials, False, params.enable_ml_settings, params.forecast_method, params, ml_model)
    display_tab3(tab3_, base_financials, False, False, params)
    display_tab4(tab4_, items_dict, base_financials, params, False, irr_val)
else:
    st.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö: {error_message}")
