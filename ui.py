# ui.py

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from utils import generate_download_link, generate_excel_download
from calculations import (
    calculate_additional_metrics, calculate_roi, calculate_irr, 
    calculate_total_bep, monte_carlo_simulation, calculate_financials, min_loan_amount_for_bep
)
from ml_models import train_ml_model, predict_with_model
import joblib
import os

def display_tab1(tab, base_financials, profit_margin, profitability, roi, irr, params):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É "–û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã".
    
    :param tab: –û–±—ä–µ–∫—Ç –≤–∫–ª–∞–¥–∫–∏.
    :param base_financials: –°–ª–æ–≤–∞—Ä—å —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏.
    :param profit_margin: –ú–∞—Ä–∂–∞ –ø—Ä–∏–±—ã–ª–∏.
    :param profitability: –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å.
    :param roi: ROI.
    :param irr: IRR.
    :param params: –û–±—ä–µ–∫—Ç WarehouseParams —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Å–∫–ª–∞–¥–∞.
    """
    with tab:
        st.header("üìä –û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        st.write("–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è.")

        col1, col2, col3 = st.columns(3)
        col1.metric("–û–±—â–∏–π –¥–æ—Ö–æ–¥ (—Ä—É–±.)", f"{base_financials['total_income']:,.2f}")
        col2.metric("–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã (—Ä—É–±.)", f"{base_financials['total_expenses']:,.2f}")
        col3.metric("–ü—Ä–∏–±—ã–ª—å (—Ä—É–±.)", f"{base_financials['profit']:,.2f}")

        col4, col5 = st.columns(2)
        col4.metric("–ú–∞—Ä–∂–∞ –ø—Ä–∏–±—ã–ª–∏ (%)", f"{profit_margin:.2f}%")
        col5.metric("–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å (%)", f"{profitability:.2f}%")

        col6, col7 = st.columns(2)
        col6.metric("ROI (%)", f"{roi:.2f}%")
        col7.metric("IRR (%)", f"{irr:.2f}%")

        st.write("---")
        st.subheader("–ú–∏–Ω. —Å—É–º–º–∞ –∑–∞–π–º–∞ –¥–ª—è BEP –∑–∞–π–º–æ–≤")
        min_loan = min_loan_amount_for_bep(params, base_financials)
        if np.isinf(min_loan):
            st.write("**–ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å** - –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–∫—Ä—ã—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –ø—Ä–∏ —Ç–µ–∫—É—â–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö.")
        else:
            st.write(f"**{min_loan:,.2f} —Ä—É–±.** - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–π–º–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤.")

        # –î–∏–∞–≥—Ä–∞–º–º–∞ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
        df_plot = pd.DataFrame({
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": ["–î–æ—Ö–æ–¥", "–†–∞—Å—Ö–æ–¥"],
            "–ó–Ω–∞—á–µ–Ω–∏–µ": [base_financials['total_income'], base_financials['total_expenses']]
        })
        fig = px.bar(df_plot, x="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", y="–ó–Ω–∞—á–µ–Ω–∏–µ", title="–î–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã", text="–ó–Ω–∞—á–µ–Ω–∏–µ",
                   color="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", color_discrete_map={"–î–æ—Ö–æ–¥": "green", "–†–∞—Å—Ö–æ–¥": "red"})
        fig.update_traces(textposition="outside")
        fig.update_layout(yaxis={'title': '–†—É–±–ª–∏'}, xaxis={'title': ''})
        st.plotly_chart(fig, use_container_width=True)

def display_tab2(tab, base_financials, disable_extended, enable_ml_settings, selected_forecast_method, params, ml_model=None):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ".
    
    :param tab: –û–±—ä–µ–∫—Ç –≤–∫–ª–∞–¥–∫–∏.
    :param base_financials: –°–ª–æ–≤–∞—Ä—å —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏.
    :param disable_extended: –§–ª–∞–≥ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
    :param enable_ml_settings: –§–ª–∞–≥ –≤–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ ML.
    :param selected_forecast_method: –í—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è.
    :param params: –û–±—ä–µ–∫—Ç WarehouseParams —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Å–∫–ª–∞–¥–∞.
    :param ml_model: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è ML-–º–æ–¥–µ–ª—å –∏–ª–∏ None.
    """
    with tab:
        st.header("üìà –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ")
        st.write("–ò–∑–º–µ–Ω–∏—Ç–µ –º–µ—Ç–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤.")

        if selected_forecast_method == "–ë–∞–∑–æ–≤—ã–π":
            st.info("–ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑: –ª–∏–Ω–µ–π–Ω—ã–π —Ä–æ—Å—Ç –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤.")
            df_projection = pd.DataFrame({
                "–ú–µ—Å—è—Ü": range(1, params.time_horizon + 1),
                "–î–æ—Ö–æ–¥—ã": np.linspace(
                    base_financials["total_income"],
                    base_financials["total_income"] * (1 + params.monthly_income_growth * params.time_horizon),
                    params.time_horizon
                ),
                "–†–∞—Å—Ö–æ–¥—ã": np.linspace(
                    base_financials["total_expenses"],
                    base_financials["total_expenses"] * (1 + params.monthly_expenses_growth * params.time_horizon),
                    params.time_horizon
                )
            })
            df_projection["–ü—Ä–∏–±—ã–ª—å"] = df_projection["–î–æ—Ö–æ–¥—ã"] - df_projection["–†–∞—Å—Ö–æ–¥—ã"]
            df_long = df_projection.melt(id_vars="–ú–µ—Å—è—Ü", value_vars=["–î–æ—Ö–æ–¥—ã", "–†–∞—Å—Ö–æ–¥—ã", "–ü—Ä–∏–±—ã–ª—å"],
                                         var_name="–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", value_name="–ó–Ω–∞—á–µ–Ω–∏–µ")
            fig = px.line(df_long, x="–ú–µ—Å—è—Ü", y="–ó–Ω–∞—á–µ–Ω–∏–µ", color="–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", title="–ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑",
                          markers=True)
            fig.update_layout(yaxis={'title': '–†—É–±–ª–∏'}, xaxis={'title': '–ú–µ—Å—è—Ü'})
            st.plotly_chart(fig, use_container_width=True)

        elif selected_forecast_method == "ML (–ª–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è)":
            if enable_ml_settings:
                st.info("ML-–ø—Ä–æ–≥–Ω–æ–∑: –û–±—É—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏.")
                if ml_model:
                    future_months = list(range(params.time_horizon + 1, params.time_horizon + 7))  # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤ –≤–ø–µ—Ä—ë–¥
                    # –ó–¥–µ—Å—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ ML-–º–æ–¥–µ–ª—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–µ—Å—è—Ü–µ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –¥–æ—Ö–æ–¥—ã
                    predictions = predict_with_model(ml_model, future_months)
                    df_ml = pd.DataFrame({
                        "–ú–µ—Å—è—Ü": future_months,
                        "–ü—Ä–æ–≥–Ω–æ–∑ –î–æ—Ö–æ–¥—ã": predictions
                    })
                    st.write("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–µ –¥–æ—Ö–æ–¥—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 6 –º–µ—Å—è—Ü–µ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ML-–º–æ–¥–µ–ª–∏:")
                    st.dataframe(df_ml.style.format({"–ü—Ä–æ–≥–Ω–æ–∑ –î–æ—Ö–æ–¥—ã": "{:,.2f} —Ä—É–±."}))
                    
                    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
                    fig_ml = px.line(df_ml, x="–ú–µ—Å—è—Ü", y="–ü—Ä–æ–≥–Ω–æ–∑ –î–æ—Ö–æ–¥—ã", title="–ü—Ä–æ–≥–Ω–æ–∑ –î–æ—Ö–æ–¥–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ML-–º–æ–¥–µ–ª–∏",
                                     markers=True)
                    fig_ml.update_layout(yaxis={'title': '–†—É–±–ª–∏'}, xaxis={'title': '–ú–µ—Å—è—Ü'})
                    st.plotly_chart(fig_ml, use_container_width=True)
                else:
                    st.warning("ML-–º–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å —Å–Ω–∞—á–∞–ª–∞.")
            else:
                st.info("ML-–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ.")
                st.write("–í–∫–ª—é—á–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ML-–ø—Ä–æ–≥–Ω–æ–∑–∞.")

        else:  # –°–∏–º—É–ª—è—Ü–∏—è –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ
            st.info("–°–∏–º—É–ª—è—Ü–∏—è –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–∑–±—Ä–æ—Å–∞ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤.")
            df_mc = monte_carlo_simulation(
                base_financials["total_income"],
                base_financials["total_expenses"],
                params.time_horizon,
                params.monte_carlo_simulations,
                params.monte_carlo_deviation,
                params.monte_carlo_seed,
                params.monthly_income_growth,
                params.monthly_expenses_growth
            )
            st.dataframe(df_mc.style.format("{:,.2f}"))
            df_long = df_mc.melt(id_vars="–ú–µ—Å—è—Ü",
                                 value_vars=["–°—Ä–µ–¥–Ω–∏–π –î–æ—Ö–æ–¥", "–°—Ä–µ–¥–Ω–∏–π –†–∞—Å—Ö–æ–¥", "–°—Ä–µ–¥–Ω—è—è –ü—Ä–∏–±—ã–ª—å"],
                                 var_name="–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", value_name="–ó–Ω–∞—á–µ–Ω–∏–µ")
            fig_mc = px.line(df_long, x="–ú–µ—Å—è—Ü", y="–ó–Ω–∞—á–µ–Ω–∏–µ", color="–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", title="–ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ: –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è",
                             markers=True)
            fig_mc.update_layout(yaxis={'title': '–†—É–±–ª–∏'}, xaxis={'title': '–ú–µ—Å—è—Ü'})
            st.plotly_chart(fig_mc, use_container_width=True)

def display_tab3(tab, base_financials, disable_extended, enable_multi_sensitivity, params):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É "–¢–æ—á–∫–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏".
    
    :param tab: –û–±—ä–µ–∫—Ç –≤–∫–ª–∞–¥–∫–∏.
    :param base_financials: –°–ª–æ–≤–∞—Ä—å —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏.
    :param disable_extended: –§–ª–∞–≥ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
    :param enable_multi_sensitivity: –§–ª–∞–≥ –≤–∫–ª—é—á–µ–Ω–∏—è –º–Ω–æ–≥–æ—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.
    :param params: –û–±—ä–µ–∫—Ç WarehouseParams —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Å–∫–ª–∞–¥–∞.
    """
    with tab:
        st.header("üîç –¢–æ—á–∫–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏ (BEP)")
        st.write("–†–∞—Å—Å—á–∏—Ç–∞–µ–º –æ–±—â—É—é BEP, –≥–¥–µ –¥–æ—Ö–æ–¥—ã –ø–æ–∫—Ä—ã–≤–∞—é—Ç —Ä–∞—Å—Ö–æ–¥—ã.")

        bep_income = calculate_total_bep(base_financials, params)
        current_income = base_financials["total_income"]

        if bep_income == float('inf'):
            st.write("**–ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å** - –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–∫—Ä—ã—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –ø—Ä–∏ —Ç–µ–∫—É—â–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö.")
        else:
            st.write(f"**–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–π –¥–æ—Ö–æ–¥ –¥–ª—è BEP:** {bep_income:,.2f} —Ä—É–±.")
            if current_income >= bep_income:
                st.success("–¢–µ–∫—É—â–∏–π –¥–æ—Ö–æ–¥ **–ø–æ–∫—Ä—ã–≤–∞–µ—Ç** —Ä–∞—Å—Ö–æ–¥—ã (BEP –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω).")
            else:
                deficit = bep_income - current_income
                st.error(f"–¢–µ–∫—É—â–∏–π –¥–æ—Ö–æ–¥ **–Ω–µ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç** —Ä–∞—Å—Ö–æ–¥—ã. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ—Ö–æ–¥ –Ω–∞ **{deficit:,.2f} —Ä—É–±.**.")

        st.write("---")
        st.subheader("–ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –¥–æ—Ö–æ–¥–∞ –∏ BEP")

        df_bep = pd.DataFrame({
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": ["–¢–µ–∫—É—â–∏–π –î–æ—Ö–æ–¥", "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–π –î–æ—Ö–æ–¥ –¥–ª—è BEP"],
            "–ó–Ω–∞—á–µ–Ω–∏–µ": [current_income, bep_income]
        })
        fig_bep = px.bar(df_bep, x="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", y="–ó–Ω–∞—á–µ–Ω–∏–µ", title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –¥–æ—Ö–æ–¥–∞ –∏ BEP", text="–ó–Ω–∞—á–µ–Ω–∏–µ",
                        color="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", color_discrete_map={"–¢–µ–∫—É—â–∏–π –î–æ—Ö–æ–¥": "blue", "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–π –î–æ—Ö–æ–¥ –¥–ª—è BEP": "orange"})
        fig_bep.update_traces(textposition="outside")
        fig_bep.update_layout(yaxis={'title': '–†—É–±–ª–∏'}, xaxis={'title': ''})
        st.plotly_chart(fig_bep, use_container_width=True)

        st.write("---")
        st.subheader("–ì—Ä–∞—Ñ–∏–∫–∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")

        def build_bep_df(params, param_key, base_val):
            """
            –°—Ç—Ä–æ–∏—Ç DataFrame –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—É.
            
            :param params: –û–±—ä–µ–∫—Ç WarehouseParams —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Å–∫–ª–∞–¥–∞.
            :param param_key: –ö–ª—é—á –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
            :param base_val: –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
            :return: DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.
            """
            vals = np.linspace(base_val * 0.5 if base_val > 0 else 0.1, base_val * 1.5 if base_val > 0 else 1.5, 50)
            profits = []
            bep_incomes = []
            orig_val = getattr(params, param_key)
            for v in vals:
                setattr(params, param_key, v)
                fin = calculate_financials(params, disable_extended)
                bep_income = calculate_total_bep(fin, params)
                profits.append(fin["profit"])
                bep_incomes.append(bep_income)
            setattr(params, param_key, orig_val)
            return pd.DataFrame({param_key: vals, "–ü—Ä–∏–±—ã–ª—å": profits, "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–π –¥–æ—Ö–æ–¥ –¥–ª—è BEP": bep_incomes})

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        analysis_params = {
            "storage_fee": "–¢–∞—Ä–∏—Ñ –ø—Ä–æ—Å—Ç–æ–≥–æ",
            "vip_extra_fee": "–î–æ–ø. —Ç–∞—Ä–∏—Ñ VIP",
            "short_term_daily_rate": "–¢–∞—Ä–∏—Ñ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–≥–æ"
        }

        for key, label in analysis_params.items():
            df_sensitivity = build_bep_df(params, key, getattr(params, key))
            fig_sensitivity = px.line(df_sensitivity, x=key, y=["–ü—Ä–∏–±—ã–ª—å", "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–π –¥–æ—Ö–æ–¥ –¥–ª—è BEP"], 
                                      labels={key: label, "value": "–†—É–±–ª–∏", "variable": "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"},
                                      title=f"{label}: –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", markers=True)
            fig_sensitivity.update_layout(yaxis={'title': '–†—É–±–ª–∏'}, xaxis={'title': label})
            fig_sensitivity.update_traces(mode='lines+markers')
            st.plotly_chart(fig_sensitivity, use_container_width=True)

def display_tab4(tab, items, base_financials, params, disable_extended, irr_val):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É "–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è".
    
    :param tab: –û–±—ä–µ–∫—Ç –≤–∫–ª–∞–¥–∫–∏.
    :param items: –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–µ—â–µ–π.
    :param base_financials: –°–ª–æ–≤–∞—Ä—å —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏.
    :param params: –û–±—ä–µ–∫—Ç WarehouseParams —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Å–∫–ª–∞–¥–∞.
    :param disable_extended: –§–ª–∞–≥ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
    :param irr_val: –ó–Ω–∞—á–µ–Ω–∏–µ IRR.
    """
    from calculations import calculate_additional_metrics, calculate_roi, calculate_irr
    with tab:
        st.header("üìã –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è")
        st.write("–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–æ—â–∞–¥–∏, –ø—Ä–∏–±—ã–ª–∏ –ø–æ —Ç–∏–ø–∞–º, –∞ —Ç–∞–∫–∂–µ –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")

        # –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ –≤–∏–¥–∞–º —Ö—Ä–∞–Ω–µ–Ω–∏—è
        col1, col2, col3, col4 = st.columns(4)
        col1.metric("–ü—Ä–æ—Å—Ç–æ–µ (–º¬≤)", f"{params.storage_area:,.2f} –º¬≤")
        col2.metric("VIP (–º¬≤)", f"{params.vip_area:,.2f} –º¬≤")
        col3.metric("–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ (–º¬≤)", f"{params.short_term_area:,.2f} –º¬≤")
        col4.metric("–ó–∞–π–º—ã (–º¬≤)", f"{params.loan_area:,.2f} –º¬≤")

        st.write("---")
        # –¢–∞–±–ª–∏—Ü–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–ª–æ—â–∞–¥–∏
        df_storage = pd.DataFrame({
            "–¢–∏–ø —Ö—Ä–∞–Ω–µ–Ω–∏—è": ["–ü—Ä–æ—Å—Ç–æ–µ", "VIP", "–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ", "–ó–∞–π–º—ã"],
            "–ü–ª–æ—â–∞–¥—å (–º¬≤)": [params.storage_area, params.vip_area, params.short_term_area, params.loan_area],
            "–î–æ—Ö–æ–¥ (—Ä—É–±.)": [
                base_financials["storage_income"],
                base_financials["vip_income"],
                base_financials["short_term_income"],
                base_financials["loan_income_after_realization"]
            ]
        })
        st.dataframe(df_storage.style.format({"–ü–ª–æ—â–∞–¥—å (–º¬≤)": "{:,.2f}", "–î–æ—Ö–æ–¥ (—Ä—É–±.)": "{:,.2f}"}))

        st.write("---")
        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–∏–±—ã–ª–∏ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
        df_profit = pd.DataFrame({
            "–¢–∏–ø —Ö—Ä–∞–Ω–µ–Ω–∏—è": ["–ü—Ä–æ—Å—Ç–æ–µ", "VIP", "–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ", "–ó–∞–π–º—ã"],
            "–î–æ—Ö–æ–¥ (—Ä—É–±.)": [
                base_financials["storage_income"],
                base_financials["vip_income"],
                base_financials["short_term_income"],
                base_financials["loan_income_after_realization"]
            ],
            "–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã (—Ä—É–±.)": [
                params.storage_area * params.rental_cost_per_m2,
                params.vip_area * params.rental_cost_per_m2,
                params.short_term_area * params.rental_cost_per_m2,
                params.loan_area * params.rental_cost_per_m2
            ],
            "–ü—Ä–∏–±—ã–ª—å (—Ä—É–±.)": [
                base_financials["storage_income"] - (params.storage_area * params.rental_cost_per_m2),
                base_financials["vip_income"] - (params.vip_area * params.rental_cost_per_m2),
                base_financials["short_term_income"] - (params.short_term_area * params.rental_cost_per_m2),
                base_financials["loan_income_after_realization"] - (params.loan_area * params.rental_cost_per_m2)
            ]
        })
        numeric_cols = ["–î–æ—Ö–æ–¥ (—Ä—É–±.)", "–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã (—Ä—É–±.)", "–ü—Ä–∏–±—ã–ª—å (—Ä—É–±.)"]
        for col in numeric_cols:
            df_profit[col] = pd.to_numeric(df_profit[col], errors="coerce")

        def highlight_negative(s):
            return ['background-color: #ffcccc' if v < 0 else '' for v in s]

        st.dataframe(
            df_profit.style.apply(highlight_negative, subset=["–ü—Ä–∏–±—ã–ª—å (—Ä—É–±.)"])
            .format({"–î–æ—Ö–æ–¥ (—Ä—É–±.)": "{:,.2f}", "–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã (—Ä—É–±.)": "{:,.2f}", "–ü—Ä–∏–±—ã–ª—å (—Ä—É–±.)": "{:,.2f}"})
        )

        st.write("---")
        # –ò—Ç–æ–≥–æ–≤—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        profit_margin, profitability = calculate_additional_metrics(
            base_financials["total_income"], base_financials["total_expenses"], base_financials["profit"]
        )
        roi_val = calculate_roi(base_financials["total_income"], base_financials["total_expenses"])
        irr_val_display = irr_val  # –£–∂–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –∏–∑ main.py
        bep_income = calculate_total_bep(base_financials, params)
        current_income = base_financials["total_income"]

        df_results = pd.DataFrame({
            "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": [
                "–û–±—â–∏–π –¥–æ—Ö–æ–¥",
                "–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã",
                "–ü—Ä–∏–±—ã–ª—å",
                "–ú–∞—Ä–∂–∞ –ø—Ä–∏–±—ã–ª–∏ (%)",
                "–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å (%)",
                "ROI (%)",
                "IRR (%)",
                "–î–æ—Ö–æ–¥ –æ—Ç –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞",
                "–ú–∏–Ω. —Å—É–º–º–∞ –∑–∞–π–º–∞ (—Ä—É–±.)",
                "–ï–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã (—Ä—É–±.)",
                "–ù–∞–ª–æ–≥–∏ (—Ä—É–±./–º–µ—Å.)",
                "–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ (—Ä—É–±./–º–µ—Å.)",
                "–ö–æ–º–º—É–Ω–∞–ª–∫–∞ (—Ä—É–±./–º–µ—Å.)",
                "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ (—Ä—É–±./–º–µ—Å.)",
                "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–π –¥–æ—Ö–æ–¥ –¥–ª—è BEP (—Ä—É–±.)",
                "–¢–µ–∫—É—â–∏–π –¥–æ—Ö–æ–¥ (—Ä—É–±.)"
            ],
            "–ó–Ω–∞—á–µ–Ω–∏–µ": [
                base_financials["total_income"],
                base_financials["total_expenses"],
                base_financials["profit"],
                profit_margin,
                profitability,
                roi_val,
                irr_val_display,
                base_financials["marketing_income"],
                min_loan_amount_for_bep(params, base_financials),
                params.one_time_expenses,
                params.taxes,
                params.insurance_expenses,
                params.utilities_expenses,
                params.maintenance_expenses,
                bep_income,
                current_income
            ]
        })

        st.markdown(generate_download_link(df_results, filename="results.csv", link_text="–°–∫–∞—á–∞—Ç—å CSV"))
        st.markdown(generate_excel_download(df_results, filename="results.xlsx", link_text="–°–∫–∞—á–∞—Ç—å Excel"))

        st.info("–°–∫–∞—á–∞–π—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç—á—ë—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.")
